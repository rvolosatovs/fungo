package fungo

func Map[F, T any](f func(F) T, vs ...F) []T {
	ret := make([]T, 0, len(vs))
	for _, v := range vs {
		ret = append(ret, f(v))
	}
	return ret
}

func Fold[F, T any](f func(T, F) T, init T, vs ...F) T {
	acc := init
	for _, v := range vs {
		acc = f(acc, v)
	}
	return acc
}
