// Copyright 2021 Romans Volosatovs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package fungo provides functional programming primitives.
package fungo

// Map calls the function f on every element of the slice vs,
// returning a new slice of the results.
func Map[F, T any](f func(F) T, vs ...F) []T {
	r := make([]T, len(vs))
	for i, v := range vs {
		r[i] = f(v)
	}
	return r
}

// TODO: Improve comment

// Fold calls the function f on every element of the slice vs,
// returning a new result.
func Fold[F, T any](f func(T, F) T, init T, vs ...F) T {
	acc := init
	for _, v := range vs {
		acc = f(acc, v)
	}
	return acc
}
