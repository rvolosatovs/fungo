package fungo_test

import (
	"reflect"
	"strconv"
	"testing"

	"github.com/rvolosatovs/fungo"
)

type MapTestCase[F, T any] struct {
    Name     string
    Func     func(F) T
    Values   []F
    Expected []T
}

func runMapTest[F, T any](t *testing.T, tc MapTestCase[F, T]) bool {
	return t.Run(tc.Name, func(t *testing.T) {
		if ret := fungo.Map(tc.Func, tc.Values...); !reflect.DeepEqual(ret, tc.Expected) {
			t.Errorf(`Got:
%v

Expected:
%v`,
				ret, tc.Expected)
		}
	})
}

func TestMap(t *testing.T) {
	for _, tc := range []MapTestCase[int, string]{
		{
			Name:     "strconv.Itoa",
			Func:     strconv.Itoa,
			Values:   []int{1, 2, 3},
			Expected: []string{"1", "2", "3"},
		},
	} {
		runMapTest(t, tc)
	}
	for _, tc := range []MapTestCase[string, string]{
		{
			Name:     "append string",
			Func:     func(s string) string { return s+"test" },
			Values:   []string{"1", "2", "3"},
			Expected: []string{"1test", "2test", "3test"},
		},
	} {
		runMapTest(t, tc)
	}
}

type FoldTestCase[F, T any] struct {
    Name     string
    Func     func(T, F) T
    Init     T
    Values   []F
    Expected T
}

func runFoldTest[F, T any](t *testing.T, tc FoldTestCase[F, T]) bool {
	return t.Run(tc.Name, func(t *testing.T) {
		if ret := fungo.Fold(tc.Func, tc.Init, tc.Values...); !reflect.DeepEqual(ret, tc.Expected) {
			t.Errorf(`Got:
%v

Expected:
%v`,
				ret, tc.Expected)
		}
	})
}

func TestFold(t *testing.T) {
	for _, tc := range []FoldTestCase[int, int]{
		{
			Name:     "sum",
			Func:     func(acc int, v int) int { return acc+v },
			Values:   []int{1, 2, 3},
			Expected: 6,
		},
	} {
		runFoldTest(t, tc)
	}
	for _, tc := range []FoldTestCase[string, string]{
		{
			Name:     "append string",
			Func:     func(acc string, v string) string { return acc+v },
			Values:   []string{"1", "2", "3"},
			Expected: "123",
		},
	} {
		runFoldTest(t, tc)
	}
}
