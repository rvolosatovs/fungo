package maps_test

import (
    "fmt"
    "testing"

    "github.com/rvolosatovs/fungo/maps"
    "github.com/rvolosatovs/fungo/internal/test"
)

type KeysTestCase[K comparable, V any] struct {
    Value	 map[K]V
    Expected []K
}

func runKeysTest[K comparable, V any](t *testing.T, tc KeysTestCase[K, V]) bool {
	return t.Run(fmt.Sprintf("%T", tc.Value), func(t *testing.T) {
        test.AssertSameElementsDeepEqual(t, maps.Keys(tc.Value), tc.Expected)
	})
}

func TestKeys(t *testing.T) {
	for _, tc := range []KeysTestCase[string, int]{
		{
			Value:    map[string]int{"1": 1, "2": 2, "3": 3},
			Expected: []string{"1", "2", "3"},
		},
	} {
		runKeysTest(t, tc)
	}
}

type ValuesTestCase[K comparable, V any] struct {
    Value	 map[K]V
    Expected []V
}

func runValuesTest[K comparable, V any](t *testing.T, tc ValuesTestCase[K, V]) bool {
	return t.Run(fmt.Sprintf("%T", tc.Value), func(t *testing.T) {
        test.AssertSameElementsDeepEqual(t, maps.Values(tc.Value), tc.Expected)
	})
}

func TestValues(t *testing.T) {
	for _, tc := range []ValuesTestCase[string, int]{
		{
			Value:    map[string]int{"1": 1, "2": 2, "3": 3},
			Expected: []int{1, 2, 3},
		},
	} {
		runValuesTest(t, tc)
	}
}
