package maps_test

import (
    "testing"

    "github.com/rvolosatovs/fungo/internal/test"
    "github.com/rvolosatovs/fungo/maps"
    "github.com/rvolosatovs/fungo/slices"
)

type KeysTestCase[K comparable, V any] struct {
    Value	 map[K]V
    Expected []K
}

func (tc KeysTestCase[K, V]) Run(t *testing.T) {
	test.AssertSameElementsDeepEqual(t, slices.Collect[K](maps.Keys(tc.Value), []K{}), tc.Expected)
}

func TestKeys(t *testing.T) {
	for name, tc := range map[string]test.Runner{
		"string->int": KeysTestCase[string, int]{
			Value:    map[string]int{"1": 1, "2": 2, "3": 3},
			Expected: []string{"1", "2", "3"},
		},
		"int->struct{}": KeysTestCase[int, struct{}]{
			Value:    map[int]struct{}{1: struct{}{}, 42: struct{}{}, 512: struct{}{}},
			Expected: []int{1, 42, 512},
		},
	} {
		t.Run(name, tc.Run)
	}
}

type ValuesTestCase[K comparable, V any] struct {
    Value	 map[K]V
    Expected []V
}

func (tc ValuesTestCase[K, V]) Run(t *testing.T) {
	test.AssertSameElementsDeepEqual(t, slices.Collect[V](maps.Values(tc.Value), []V{}), tc.Expected)
}

func TestValues(t *testing.T) {
	for name, tc := range map[string]test.Runner{
		"string->int": ValuesTestCase[string, int]{
			Value:    map[string]int{"1": 1, "2": 2, "3": 3},
			Expected: []int{1, 2, 3},
		},
		"int->struct{}": ValuesTestCase[int, struct{}]{
			Value:    map[int]struct{}{1: struct{}{}, 42: struct{}{}, 512: struct{}{}},
			Expected: []struct{}{{}, {}, {}},
		},
	} {
		t.Run(name, tc.Run)
	}
}
